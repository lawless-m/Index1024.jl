var documenterSearchIndex = {"docs":
[{"location":"example1/#Example-Indexing-of-a-CSV-file","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"","category":"section"},{"location":"example1/#The-Data","page":"Example Indexing of a CSV file","title":"The Data","text":"","category":"section"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"The CSV file I wish to index contains the data from the UK Land Registry. ","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"https://www.gov.uk/guidance/about-the-price-paid-data","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"This records the value of every house sale in England and Wales. I have gathered the data from 2000 onwards and extracted the following dataset. The postcode, year and price of every transaction.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"What I want is to be able to extract the list of year / price entries for a particular postcode.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"postcode,year,price       \nAL10 0AB,2000,63000       \nAL10 0AB,2003,126500      \nAL10 0AB,2003,167000      \nAL10 0AB,2003,177000      \nAL10 0AB,2004,125000      \nAL10 0AB,2013,220000      \nAL10 0AB,2014,180000      \n⋮\nYO8 9YB,2021,269950\nYO8 9YD,2011,230000\nYO8 9YD,2012,249999\nYO8 9YD,2018,327500\nYO8 9YE,2009,320000\nYO8 9YE,2019,380000\nYO8 9YE,2020,371500\nYO90 1UU,2017,15500000\nYO90 1WR,2015,28100000\nYO91 1RT,2017,150000","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"13,193,754 lines, including the header. The file size is 267,473,752 bytes.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"In the Index I can store the Named Tuple (data:UInt64, aux:UInt64) for each UInt64 Key.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"So what I shall do is to store the file offset of the first postcode entry in the data and the number of rows in the aux.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"It just so happens that the postcode is, at most, 7 characters long, so this can be converted into a UInt64 with a byte spare for the tag.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"By turning the postcodes into a fixed format from","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"YO8 9YE\nYO90 1UU","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"to","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"YO 8 9YE\nYO90 1UU","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"we can also make the process reversible.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"Here are the functions to do this","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"function postcode_to_UInt64(pc) \n    m = match(r\"([A-Z]+)([0-9]+([A-Z]+)?) ?([0-9]+)([A-Z]+)\", replace(pc, \" \"=>\"\"))\n    if m == nothing || m[1] === nothing || m[2] === nothing || m[4] === nothing || m[5] === nothing\n        return 0\n    end\n    reduce((a,c) -> UInt64(a) << 8 + UInt8(c), collect(lpad(m[1], 2) * lpad(m[2], 2) * m[4] * m[5]), init=0)\nend\n\nfunction UInt64_to_postcode(u)\n    cs = Char[]\n    while u > 0\n        push!(cs, Char(u & 0xff))\n        u >>= 8\n    end\n    part(cs) = replace(String(reverse(cs)), \" \"=>\"\")\n    \"$(part(cs[4:end])) $(part(cs[1:3]))\"\nend","category":"page"},{"location":"example1/#Creating-the-Keyset","page":"Example Indexing of a CSV file","title":"Creating the Keyset","text":"","category":"section"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"So, now iterate over the data and create the Keyset","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"function count_lines(io, pcode)\n    lines = 0\n    pos = position(io)\n    while (line = readline(io)) !== nothing\n        lines += 1\n        newcode = split(line, \",\", limit=2)[1]\n        if newcode != pcode\n            return newcode, lines, pos\n        end\n        pos = position(io)\n    end\n    return \"\", lines, pos\nend\n\ncreate_kvs(fname) = open(create_kvs, fname)\n\nfunction create_kvs(io::IO)\n    kvs = Dict{UInt64, DataAux}()\n    readline(io)\n    pos = position(io)\n    pcode, lines, nextpos = count_lines(io, \"postcode\")\n    while pcode != \"\"\n        newcode, lines, nextpos = count_lines(io, pcode)\n        kvs[postcode_to_UInt64(pcode)] = (data=pos, aux=lines)\n        pcode = newcode\n        pos = nextpos\n    end\n    kvs\nend","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"It's not really necessary to understand how all that works (in fact my first version was wrong!), just know that when we run it","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> create_kvs(\"pc_year_price.csv\")","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"we get something like the following Dictionary","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"Dict{UInt64, NamedTuple{(:data, :aux), Tuple{UInt64, UInt64}}} with 1424321 entries:\n  0x00594f2038395942 => (data = 0x00000000000000e6, aux = 0x0000000000000007)\n  0x00594f2038395945 => (data = 0x0000000000000136, aux = 0x0000000000000009)\n  ⋮\n  0x00414c3130304142 => (data = 0x0000000000000536, aux = 0x0000000000000027)\n  0x00594f2038395944 => (data = 0x0000000000000bfa, aux = 0x0000000000000013)","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"The keys are the encoded postcodes e.g.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"\"AL10 0AB\" becomes 0x00414c3130304142 and at offset 0x536 in the CSV files, has 0x27 rows of data","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"Which is the format of the keyset we need to build the actual index.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"That part of the process is in the module","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> @time build_index_file(\"Postcode_Year_Price.index\", create_kvs(\"pc_year_price.csv\"))\n 10.181108 seconds (83.94 M allocations: 6.096 GiB, 10.57% gc time)\n42453022","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"build_index_file returns the number of bytes written","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"So now in my pwd() is the index file","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"42453022 Jan 18 13:56 Postcode_Year_Price.index","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"At 41M it is only a bit smaller than the 256M of pc_year_price.csv but to explore it, we don't need to have it in memory.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"If we open the index we get","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> idx = open_index(\"Postcode_Year_Price.index\")\n NI key:0x1053522036384146 value: (LR left: NI key:0x2053522036384146 value:(Leaf data:0x000000000287c576 aux:0x0000000000000000) right: NI key:0x20594f3931315254 value:(Leaf data:0x000000000287c76e aux:0x0000000000000000))","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"This is the root node of the first page. This example is rather shallow, but that is an artefact of the number of data Leafs.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"We can search this idx ","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> get_leaf(idx, postcode_to_UInt64(\"YO8 9YB\"))\n NI key:0x30594f2038395942 value:(Leaf data:0x000000000ff15226 aux:0x0000000000000007)","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"How quick is this? ","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> @benchmark get_leaf($idx, $postcode_to_UInt64(\"YO8 9YB\"))\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  32.455 μs …  3.829 ms  ┊ GC (min … max): 0.00% … 97.92%\n Time  (median):     35.409 μs              ┊ GC (median):    0.00%\n Time  (mean ± σ):   36.733 μs ± 52.923 μs  ┊ GC (mean ± σ):  2.01% ±  1.38%\n\n    ▃█▆▄▅▄▃▆█▆▅▅▃     ▄▅▃                                      \n  ▂▅██████████████▆▅▅█████▇▅▄▅▄▃▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▄\n  32.5 μs         Histogram: frequency by time        46.5 μs <\n\n Memory estimate: 9.31 KiB, allocs estimate: 247.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"Certainly a lot slower (20x) than reading it straight from memory. ","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"But at least it doesn't need the whole kvs in memory","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"What we don't have, though, is the actual data. So let's write an accessor function for that.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"prices_for_postcode(idx, pcode, csvfile) = open(csvfile) do io prices_for_postcode(idx, pcode, io) end\n        \nfunction prices_for_postcode(idx, pcode, csvio::IO)\n    (offset, lines) = get(idx, postcode_to_UInt64(pcode), (0,0))\n    if lines > 0\n        seek(csvio, offset)\n        return CSV.File(csvio; header=[\"postcode\", \"year\", \"price\"], limit=lines)\n    end\nend","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"We write two functions, one which takes a filename and one which takes an IO. That way we can perform either a single lookup or multiple lookups without opening / closing the file (or use an IOBuffer instead of a file and go full circle!)","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"The function finds a Leaf node. Remembering the data is the offset and the aux the number of rows, we can then read the rows as CSV from the file.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> prices_for_postcode(idx, \"YO8 9YB\", csvfile)\n7-element CSV.File:\n CSV.Row: (postcode = \"YO8 9YB\", year = 2000, price = 59500)\n CSV.Row: (postcode = \"YO8 9YB\", year = 2000, price = 95000)\n CSV.Row: (postcode = \"YO8 9YB\", year = 2009, price = 230000)\n CSV.Row: (postcode = \"YO8 9YB\", year = 2014, price = 222000)\n CSV.Row: (postcode = \"YO8 9YB\", year = 2014, price = 237000)\n CSV.Row: (postcode = \"YO8 9YB\", year = 2018, price = 142500)\n CSV.Row: (postcode = \"YO8 9YB\", year = 2021, price = 269950)","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"We could also create a DataFrame from this data, if we were so inclined","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"julia> prices_for_postcode(idx, \"YO8 9YB\", csvfile) |> DataFrame\n7×3 DataFrame\n Row │ postcode  year   price  \n     │ String7   Int64  Int64  \n─────┼─────────────────────────\n   1 │ YO8 9YB    2000   59500\n   2 │ YO8 9YB    2000   95000\n   3 │ YO8 9YB    2009  230000\n   4 │ YO8 9YB    2014  222000\n   5 │ YO8 9YB    2014  237000\n   6 │ YO8 9YB    2018  142500\n   7 │ YO8 9YB    2021  269950","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"Creating this document revealed that node_range is broken, so I won't write that up at the moment.","category":"page"},{"location":"example1/","page":"Example Indexing of a CSV file","title":"Example Indexing of a CSV file","text":"In the future work, I plan to incorprate SeaweedFS into the Index. So we could use this index along with Distributed. But that's another project!","category":"page"},{"location":"#Index1024.jl","page":"Index1024.jl","title":"Index1024.jl","text":"","category":"section"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Documentation for Index1024.jl","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Data Types","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Index","category":"page"},{"location":"#Index1024.Index","page":"Index1024.jl","title":"Index1024.Index","text":"Index\n\nstruct to hold the data associated with a particular Index\n\nProperties\n\nmeta::Vector{String} user defined meta-data to save in the index file\nio::IO the file handle of the index used to navigate\n\n\n\n\n\n","category":"type"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"DataAux","category":"page"},{"location":"#Index1024.DataAux","page":"Index1024.jl","title":"Index1024.DataAux","text":"DataAux\n\nType of the leaf data. (data=UInt64, aux=UInt64)\n\nNamed elements\n\ndata::UInt64 user supplied\naux::UInt64 user supplied\n\n\n\n\n\n","category":"type"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Creating an Index","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"build_index_file","category":"page"},{"location":"#Index1024.build_index_file","page":"Index1024.jl","title":"Index1024.build_index_file","text":"build_index_file(io::IO, kvs; meta=String[])\nbuild_index_file(filename::AbstractString, kvs; meta=String[])\n\nCreate the on-disk representation of the index of the kvs Dict. The Leafs are sorted by the key values of the kvs.\n\nArguments\n\nio::IO descriptor for writing (so you can use IOBuffer if desired)\nkvs Dict{UInt64, T}() where T is the type of the leaf, by default DataAux - might expand in future\nmeta::Vector{AbstractString} vector of strings to add meta data\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Using an index","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"open_index","category":"page"},{"location":"#Index1024.open_index","page":"Index1024.jl","title":"Index1024.open_index","text":"open_index(filename::AbstractString)::Index\nopen_index(io::IO)::Index\n\nOpen an Index struct from file on which one can perform searches.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"search","category":"page"},{"location":"#Index1024.search","page":"Index1024.jl","title":"Index1024.search","text":"search(idx::Index, search_key::UInt64)::Union{UInt64, Nothing}\n\nSearch the given index for a given search_key returning a Tuple of the previously stored value If the search_key is not found, return nothing\n\nArguments\n\nidx Index to use\nsearch_key UInt64 key to search for\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"get","category":"page"},{"location":"#Base.get","page":"Index1024.jl","title":"Base.get","text":"get(idx::Index, search_key, default)\n\nSearch the given index for a given search_key returning a Tuple of the previously stored value or the default\n\nArguments\n\nidx Index to search\nsearch_key untagged UInt64 key to search for\ndefault what to return if the key is not found\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"node_range","category":"page"},{"location":"#Index1024.node_range","page":"Index1024.jl","title":"Index1024.node_range","text":"node_range(idx::Index, min_key, max_key)\n\nGather all the Leafs in a given idx where min_key <= key <= max_key\n\nCURRENTLY BROKEN\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"todot","category":"page"},{"location":"#Index1024.todot","page":"Index1024.jl","title":"Index1024.todot","text":"todot(idx::Index)\n\nOutput the tree in GraphViz dot format. Used for debugging and only includes the root node.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Extending the library","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"build_page","category":"page"},{"location":"#Index1024.build_page","page":"Index1024.jl","title":"Index1024.build_page","text":"build_page(ks, kvs, terminal_tag)\n\nUsing the given keys ks use the key/values in ks to generate the tree for this page.  The page is the same structure whether the terminals are leafs or \"pointers\"\n\nArguments\n\nks UInt64 keys to write in the terminals (a fixed size per page)\nkvs the key / value dictionary containing all of the UInt64 => DataAux pairs\nterminal_tag the UInt8 Tag applied to the keys of the terminals\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"page_nodes","category":"page"},{"location":"#Index1024.page_nodes","page":"Index1024.jl","title":"Index1024.page_nodes","text":"page_nodes(idx, page, min_key, max_key)\n\nWalk the entire page, a return the leafs and topage Nodes in separate lists\n\nArguments\n\nidx Index of the tree, needed for io\npage first node of the given page\nmin_key, max_key range of keys for the Leafs wanted\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"get_leaf","category":"page"},{"location":"#Index1024.get_leaf","page":"Index1024.jl","title":"Index1024.get_leaf","text":"get_leaf(idx::Index, search_key)\n\nSearch the tree for a particular leaf node and return it (or nothing)\n\nArguments\n\nidx an Index to search\nsearch_key an untagged UInt64 key to search for\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"write_pages","category":"page"},{"location":"#Index1024.write_pages","page":"Index1024.jl","title":"Index1024.write_pages","text":"write_pages(io, sorted_keys, kvs, terminal_tag; terminal_count=16)\n\nWrite the current depth of the tree to disk, depth first. Returns the keys at the root of each page in order and generates the kvs to use as DataAux values\n\nArguments\n\nio - write into this IO\nsorted_keys keys to use in the terminals, in order\nkvs Dict of the values to use in the terminals\nterminal_tag Tag the terminals with terminal_tag (which will be either leaf or topage)\nterminal_count write this many terminals, which might be more than the number of keys\n\n\n\n\n\n","category":"function"}]
}
