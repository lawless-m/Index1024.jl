var documenterSearchIndex = {"docs":
[{"location":"#Index1024.jl","page":"Index1024.jl","title":"Index1024.jl","text":"","category":"section"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Documentation for Index1024.jl","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"build_index_file","category":"page"},{"location":"#Index1024.build_index_file","page":"Index1024.jl","title":"Index1024.build_index_file","text":"build_index_file(io::IO, filelist, kvs; aux=Dict())\nbuild_index_file(filename::AbstractString, filelist, kvs; aux=Dict())\n\nCreate the on-disk representation of the index of the kvs Dict. The Tree's Leaves are sorted by the key value of the kvs and store both the kvs[key] and auxkey All keys and values are all converted to UInt64.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"open_index","category":"page"},{"location":"#Index1024.open_index","page":"Index1024.jl","title":"Index1024.open_index","text":"open_index(filename::AbstractString)::Index\nopen_index(io::IO)::Index\n\nCreate an Index struct on which one can perform searches using a previously created Index file.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"search","category":"page"},{"location":"#Index1024.search","page":"Index1024.jl","title":"Index1024.search","text":"search(idx::Index, search_key::UInt64)::Union{Tuple{UInt64, UInt64}, Nothing}\n\nSearch the given index for a given searchkey returning a Tuple of the previously stored value / aux pair (or 0 for the aux if it wasn't supplied). If the searchkey is not found, return nothing\n\n\n\n\n\n","category":"function"}]
}
