var documenterSearchIndex = {"docs":
[{"location":"#Index1024.jl","page":"Index1024.jl","title":"Index1024.jl","text":"","category":"section"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"Documentation for Index1024.jl","category":"page"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"build_index_file","category":"page"},{"location":"#Index1024.build_index_file","page":"Index1024.jl","title":"Index1024.build_index_file","text":"build_index_file(io::IO, kvs; meta=String[])\nbuild_index_file(filename::AbstractString, kvs; meta=String[])\n\n#Arguments io::IO descriptor for writing (so you can use IOBuffer if desired) meta::Vector{AbstractString} vector of strings to add meta data Create the on-disk representation of the index of the kvs Dict. The Tree's Leaves are sorted by the key value of the kvs and store the kvs[key]  All keys and values are all converted to UInt64.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"open_index","category":"page"},{"location":"#Index1024.open_index","page":"Index1024.jl","title":"Index1024.open_index","text":"open_index(filename::AbstractString)::Index\nopen_index(io::IO)::Index\n\nCreate an Index struct on which one can perform searches using a previously created Index file.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"search","category":"page"},{"location":"#Index1024.search","page":"Index1024.jl","title":"Index1024.search","text":"search(idx::Index, search_key::UInt64)::Union{UInt64, Nothing}\n\nSearch the given index for a given searchkey returning a Tuple of the previously stored value If the searchkey is not found, return nothing\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index1024.jl","title":"Index1024.jl","text":"get","category":"page"},{"location":"#Base.get","page":"Index1024.jl","title":"Base.get","text":"get(idx::Index, search_key, default)\n\nSearch the given index for a given searchkey returning a Tuple of the previously stored value If the searchkey is not found, return the supplied default\n\n\n\n\n\n","category":"function"}]
}
